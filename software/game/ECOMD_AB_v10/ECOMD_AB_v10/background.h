#ifndef BACKGROUND_H
#define BACKGROUND_H

byte fireFrame = 0;

PROGMEM const unsigned char surrounding_plus_mask[] = {
  // width, height
  8, 8,
  // tile 0
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  // tile 1
  0xFF, 0xFF, 0xAA, 0xFF, 0x53, 0xFF, 0x02, 0xFF, 0x53, 0xFF,
  0x02, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF,
  // tile 2
  0x03, 0x03, 0xF2, 0xF3, 0x13, 0xF3, 0x1E, 0xFF, 0x13, 0xF3,
  0x12, 0xF3, 0x13, 0xF3, 0x12, 0xF3,
  // tile 3
  0x13, 0xF3, 0x12, 0xF3, 0x13, 0xF3, 0x12, 0xF3, 0x13, 0xF3,
  0x12, 0xF3, 0x13, 0xF3, 0x12, 0xF3,
  // tile 4
  0x13, 0xF3, 0x12, 0xF3, 0x13, 0xF3, 0x1E, 0xFF, 0x13, 0xF3,
  0xF2, 0xF3, 0x03, 0x03, 0x02, 0x03,
  // tile 5
  0x03, 0x03, 0x02, 0x03, 0x03, 0x03, 0x02, 0x03, 0x03, 0x03,
  0x02, 0x03, 0x03, 0x03, 0x02, 0x03,
  // tile 6
  0x03, 0x03, 0x02, 0x03, 0xFF, 0xFF, 0x02, 0x03, 0x03, 0x03,
  0x02, 0x03, 0x03, 0x03, 0x02, 0x03,
  // tile 7
  0x03, 0x03, 0x02, 0x03, 0x03, 0x03, 0x02, 0x03, 0x03, 0x03,
  0x02, 0x03, 0xFF, 0xFF, 0x02, 0x03,
  // tile 8
  0xF3, 0xF3, 0x12, 0xF3, 0x1F, 0xFF, 0x12, 0xF3, 0x13, 0xF3,
  0x12, 0xF3, 0x13, 0xF3, 0x12, 0xF3,
  // tile 9
  0x13, 0xF3, 0x12, 0xF3, 0x13, 0xF3, 0x12, 0xF3, 0x1F, 0xFF,
  0x12, 0xF3, 0xF3, 0xF3, 0x02, 0x03,
  // tile 10
  0xFF, 0xFF, 0xAA, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  // tile 11
  0xFF, 0xFF, 0xAA, 0xFF, 0x94, 0xFF, 0x80, 0xFF, 0x94, 0xFF,
  0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  // tile 12
  0x00, 0x00, 0xFF, 0xFF, 0x80, 0xFF, 0x80, 0xFF, 0x80, 0xFF,
  0x80, 0xFF, 0x80, 0xFF, 0x80, 0xFF,
  // tile 13
  0x80, 0xFF, 0x80, 0xFF, 0x80, 0xFF, 0x80, 0xFF, 0x80, 0xFF,
  0x80, 0xFF, 0x80, 0xFF, 0x80, 0xFF,
  // tile 14
  0x80, 0xFF, 0x80, 0xFF, 0x80, 0xFF, 0x80, 0xFF, 0x80, 0xFF,
  0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
  // tile 15
  0x1F, 0x1F, 0x10, 0x1F, 0x10, 0x1F, 0x10, 0x1F, 0x10, 0x1F,
  0x10, 0x1F, 0x10, 0x1F, 0x10, 0x1F,
  // tile 16
  0x10, 0x1F, 0x10, 0x1F, 0x10, 0x1F, 0x10, 0x1F, 0x10, 0x1F,
  0x10, 0x1F, 0x10, 0x1F, 0x10, 0x1F,
  // tile 17
  0x10, 0x1F, 0x10, 0x1F, 0x10, 0x1F, 0x10, 0x1F, 0x10, 0x1F,
  0x10, 0x1F, 0x1F, 0x1F, 0x00, 0x00,
  // tile 18
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80,
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  // tile 19
  0x80, 0x80, 0xC0, 0xC0, 0xFF, 0xFF, 0xC0, 0xC0, 0x80, 0x80,
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  // tile 20
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  // tile 21
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  0xC0, 0xC0, 0xFF, 0xFF, 0xC0, 0xC0,
  // tile 22
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  // tile 23
  0x03, 0x03, 0x02, 0x03, 0x03, 0x03, 0xFE, 0xFF, 0x0B, 0xFF,
  0xFE, 0xFF, 0x03, 0x03, 0x02, 0x03,
  // tile 24
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0xA0, 0xFF,
  0xFF, 0xFF, 0x80, 0x80, 0x80, 0x80,
};


PROGMEM const byte surrounding_tiles[] = {
  1,  2,  3,  4,  5,  5,  6,  0,  0,  7,  5,  5,  8,  3,  9,  1,
  10, 12, 13, 14,  0, 20, 19, 20, 20, 21, 20,  0, 15, 16, 17, 10,
  10,  0,  0,  0,  0,  5,  6,  5,  5,  7,  5,  0,  0,  0,  0, 10,
  11, 20, 20, 20, 20, 20, 19,  0,  0, 21, 20, 20, 20, 20, 20, 11,
  1,  5,  5,  5,  5,  5,  5,  0,  0,  5,  5,  5,  5,  5,  5,  1,
  10,  0,  0,  0,  0, 20, 20, 20, 20, 20, 20,  0,  0,  0,  0, 10,
  10,  0,  0,  0,  0,  5, 23,  5,  5, 23,  5,  0,  0,  0,  0, 10,
  11, 20, 20, 20, 20, 20, 24,  0,  0, 24, 20, 20, 20, 20, 20, 11,
};


PROGMEM const unsigned char backdrop_plus_mask[] = {
  // width, height
  8, 8,
  // frame 0
  0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
  0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,

  // frame 1
  0xAA, 0xFF, 0x00, 0xFF, 0xAA, 0xFF, 0x00, 0xFF,
  0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,

  // frame 2
  0xAA, 0xFF, 0x00, 0xFF, 0xAA, 0xFF, 0x00, 0xFF,
  0xAA, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,

  // frame 3
  0xAA, 0xFF, 0x00, 0xFF, 0xAA, 0xFF, 0x00, 0xFF,
  0xAA, 0xFF, 0x00, 0xFF, 0xAA, 0xFF, 0x00, 0xFF,

  // frame 4
  0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
  0xA8, 0xFF, 0x00, 0xFF, 0xAA, 0xFF, 0x00, 0xFF,

  // frame 5
  0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
  0xAA, 0xFF, 0x00, 0xFF, 0xAA, 0xFF, 0x00, 0xFF,

  // frame 6
  0xA8, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
  0xAA, 0xFF, 0x00, 0xFF, 0xAA, 0xFF, 0x00, 0xFF,

  // frame 7
  0xAA, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
  0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,

  // frame 8
  0xAA, 0xFF, 0x00, 0xFF, 0xAA, 0xFF, 0x00, 0xFF,
  0xA8, 0xFF, 0x00, 0xFF, 0xA0, 0xFF, 0x00, 0xFF,

  // frame 9
  0xAA, 0xFF, 0x00, 0xFF, 0xA8, 0xFF, 0x00, 0xFF,
  0xA8, 0xFF, 0x00, 0xFF, 0xA8, 0xFF, 0x00, 0xFF,

  // frame 10
  0xA0, 0xFF, 0x00, 0xFF, 0xA0, 0xFF, 0x00, 0xFF,
  0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,

  // frame 11
  0xAA, 0xFF, 0x00, 0xFF, 0xAA, 0xFF, 0x00, 0xFF,
  0xA0, 0xFF, 0x00, 0xFF, 0xA0, 0xFF, 0x00, 0xFF,

  // frame 12
  0x80, 0xFF, 0x00, 0xFF, 0xAA, 0xFF, 0x00, 0xFF,
  0xA8, 0xFF, 0x00, 0xFF, 0xAA, 0xFF, 0x00, 0xFF,

  // frame 13
  0x00, 0xFF, 0x00, 0xFF, 0xAA, 0xFF, 0x00, 0xFF,
  0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,

  // frame 14
  0xA0, 0xFF, 0x00, 0xFF, 0xA8, 0xFF, 0x00, 0xFF,
  0xAA, 0xFF, 0x00, 0xFF, 0xAA, 0xFF, 0x00, 0xFF,

  // frame 15
  0xA8, 0xFF, 0x00, 0xFF, 0xA0, 0xFF, 0x00, 0xFF,
  0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
};

PROGMEM const unsigned char firepit_plus_mask[] = {
// width, height, designed by @JUSTIN_CYR
16, 16,
// frame 0
0x00, 0x00, 0x30, 0x30, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xE0, 
0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x30, 0x30, 0x60, 0x60, 
0x00, 0x00, 0x78, 0x78, 0xFE, 0xFE, 0xFF, 0xFF, 0xCE, 0xFE, 0xE4, 0xFC, 0xF2, 0xFE, 0xFD, 0xFF, 
0xF8, 0xFF, 0xF7, 0xFF, 0xCF, 0xFF, 0xF3, 0xFF, 0xF7, 0xFF, 0xCF, 0xFF, 0x7E, 0x7E, 0x3C, 0x3C, 

// frame 1
0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 
0x60, 0x60, 0xC0, 0xC0, 0x80, 0x80, 0xE0, 0xE0, 0xC0, 0xC0, 0x80, 0x80, 0x10, 0x10, 0x20, 0x20, 
0x3C, 0x3C, 0x7E, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0x66, 0xE6, 0xF0, 0xF0, 0xF9, 0xF9, 0xFE, 0xFE, 
0xDC, 0xFC, 0xBB, 0xFF, 0xF7, 0xFF, 0xF8, 0xFF, 0xFD, 0xFF, 0xFB, 0xFF, 0xE7, 0xFF, 0x7E, 0x7E, 

// frame 2
0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 
0x60, 0x60, 0x80, 0x80, 0x00, 0x00, 0xE0, 0xE0, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 
0x1C, 0x1C, 0x3F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xB3, 0xF3, 0x7C, 0xFC, 0xFC, 0xFC, 0xBF, 0xFF, 
0xCE, 0xFE, 0xDD, 0xFD, 0xB8, 0xF8, 0xFF, 0xFF, 0xFE, 0xFE, 0xFD, 0xFD, 0x72, 0x72, 0x3C, 0x3C, 

// frame 3
0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x90, 
0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x18, 0x18, 0x3E, 0x3E, 0xFF, 0xFF, 0x8E, 0xFE, 0xDC, 0xFC, 0xBC, 0xFC, 0xCF, 0xFF, 
0xF3, 0xFF, 0xEE, 0xFE, 0xDC, 0xFC, 0x9F, 0xFF, 0xFF, 0xFF, 0x7E, 0x7E, 0x38, 0x38, 0x00, 0x00, 

// frame 4
0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0xB0, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x30, 0x30, 0xFC, 0xFC, 0x8F, 0xFF, 0xDE, 0xFE, 0xEC, 0xFC, 0xF6, 0xFE, 0xFB, 0xFF, 
0xF9, 0xFF, 0xF6, 0xFE, 0xEF, 0xFF, 0x8F, 0xFF, 0xFF, 0xFF, 0x78, 0x78, 0x00, 0x00, 0x00, 0x00, 

// frame 5
0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x90, 0x90, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0, 0xF0, 0xF0, 
0x00, 0x00, 0x80, 0x80, 0xE0, 0xE0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x7C, 0x7C, 0xFF, 0xFF, 0xCF, 0xFF, 0xB3, 0xFF, 0xFB, 0xFF, 0xFD, 0xFF, 0xF8, 0xFF, 
0xFB, 0xFF, 0xFD, 0xFF, 0xFB, 0xFF, 0x77, 0xFF, 0x83, 0xFF, 0xFF, 0xFF, 0x60, 0x60, 0x00, 0x00, 

// frame 6
0x00, 0x00, 0x00, 0x00, 0x90, 0x90, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x60, 0xE0, 
0x80, 0x80, 0x80, 0x80, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x7E, 0x7E, 0xCF, 0xFF, 0xB7, 0xFF, 0xF9, 0xFF, 0xFB, 0xFF, 0xFD, 0xFF, 0xFE, 0xFF, 0xFC, 0xFF, 
0xFD, 0xFF, 0xFE, 0xFF, 0xF9, 0xFF, 0xFB, 0xFF, 0xB7, 0xFF, 0xC2, 0xFE, 0x7F, 0x7F, 0x3C, 0x3C, 

// frame 7
0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0xC0, 0xC0, 0x60, 0x60, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0, 
0x00, 0x00, 0x80, 0x80, 0xE0, 0xE0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 
0x27, 0x27, 0x7B, 0x7B, 0xFD, 0xFD, 0xFE, 0xFE, 0xFC, 0xFC, 0xBF, 0xFF, 0xDF, 0xFF, 0xEF, 0xFF, 
0xBF, 0xFF, 0xBE, 0xFE, 0xFC, 0xFC, 0xFB, 0xFB, 0x7C, 0x7C, 0x39, 0x39, 0x07, 0x07, 0x3F, 0x3F, 

// frame 8
0x80, 0x80, 0xC0, 0xC0, 0x40, 0x40, 0x20, 0x20, 0xD0, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 
0x00, 0x00, 0x40, 0x40, 0xF0, 0xF0, 0x20, 0x20, 0x40, 0x40, 0x80, 0x80, 0xC0, 0xC0, 0x80, 0x80, 
0x03, 0x03, 0x3C, 0x3C, 0xFE, 0xFE, 0xFF, 0xFF, 0x3F, 0xFF, 0xDF, 0xFF, 0xEE, 0xFE, 0xC7, 0xFF, 
0xDF, 0xFF, 0xDE, 0xFE, 0xBD, 0xFD, 0xFE, 0xFE, 0xFF, 0xFF, 0x7E, 0x7E, 0x3B, 0x3B, 0x07, 0x07, 

// frame 9
0x80, 0x80, 0x60, 0x60, 0x20, 0x20, 0x10, 0x10, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 
0x80, 0x80, 0x00, 0x00, 0x30, 0x30, 0xC0, 0xC0, 0x80, 0x80, 0x40, 0x40, 0xE0, 0xE0, 0xC0, 0xC0, 
0x00, 0x00, 0x18, 0x18, 0x7E, 0x7E, 0xFF, 0xFF, 0x9F, 0xFF, 0xEE, 0xFE, 0xF7, 0xFF, 0xE3, 0xFF, 
0xEF, 0xFF, 0xE7, 0xFF, 0xEE, 0xFE, 0x9F, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x3C, 0x3C, 0x03, 0x03, 

// frame 10
0x00, 0x00, 0x20, 0x20, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60, 0x60, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0xFC, 0xFC, 0xCE, 0xFE, 0xF6, 0xFE, 0xFB, 0xFF, 0xF1, 0xFF, 
0xFE, 0xFE, 0xF6, 0xFE, 0xEF, 0xFF, 0xFE, 0xFE, 0xFC, 0xFC, 0x78, 0x78, 0x00, 0x00, 0x00, 0x00, 

// frame 11
0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x20, 0x20, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x78, 0x78, 0xE4, 0xFC, 0xFA, 0xFE, 0xFC, 0xFC, 0x7F, 0xFF, 
0xB8, 0xF8, 0xFA, 0xFA, 0xF4, 0xFC, 0xFC, 0xFC, 0x78, 0x78, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 

// frame 12
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFE, 0xBE, 0xFE, 0xC7, 0xFF, 
0xEC, 0xFC, 0xDE, 0xFE, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0x70, 0x70, 0x00, 0x00, 0x00, 0x00, 

// frame 13
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x7A, 0x7A, 0xFD, 0xFD, 0xFC, 0xFC, 0xFE, 0xFE, 0xFE, 0xFE, 0x9F, 0xFF, 0xE3, 0xFF, 
0xF6, 0xFE, 0xCE, 0xFE, 0xEF, 0xFF, 0xDE, 0xFE, 0xFC, 0xFC, 0xFC, 0xFC, 0x7B, 0x7B, 0x0E, 0x0E, 

// frame 14
0x00, 0x00, 0xC0, 0xC0, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xE0, 0xC0, 0xC0, 
0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0xFE, 0xFE, 0xFC, 0xFC, 0x9E, 0xFE, 0xEF, 0xFF, 0xF1, 0xFF, 
0xFB, 0xFF, 0xF6, 0xFE, 0xEF, 0xFF, 0xF7, 0xFF, 0xCF, 0xFF, 0xFE, 0xFE, 0x7C, 0x7C, 0x01, 0x01, 

};


PROGMEM const byte backdrop_tiles[] =
{
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 14,  3,  8,  0,  0,  0,  0,
  0,  0,  7,  3,  7,  0,  0,  0,  0, 14, 15,  0,  0,  3,  3,  3,  0,  0,  0, 13,
  0,  4,  8,  3,  9, 10, 10, 13,  0,  3,  1, 13,  0,  3,  3,  3,  0,  7,  0,  2,
  1,  5,  3,  3,  3,  1,  1, 12, 11,  3,  3,  2, 10,  3,  3,  3,  5,  2,  0,  2,
  2,  6,  3,  3,  3, 11,  1,  3,  3,  3,  3,  2, 11,  3,  3,  3,  3,  3, 11,  2,
  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
};

void drawSurrounding()
{
  for (byte y = 0; y < 8; y++)
  {
    for (byte x = 0; x < 16; x++)
    {
      sprites.drawPlusMask(x * 8, y * 8, surrounding_plus_mask, pgm_read_byte(&surrounding_tiles[x + 16 * y]));
    }
  }
}

void drawBackDrop()
{
  for (byte y = 0; y < 6; y++)
  {
    for (byte x = 0; x < 20; x++)
    {
      sprites.drawPlusMask((x * 8) + 8 - (player.x / 4) , 16 + y * 8, backdrop_plus_mask, pgm_read_byte(&backdrop_tiles[x + 20 * y]));
    }
  }
}

void drawFirePit()
{
  if (arduboy.everyXFrames(2))fireFrame++;
  if (fireFrame > 14)fireFrame = 0;
  sprites.drawPlusMask(56, 48, firepit_plus_mask, fireFrame);
}
#endif



